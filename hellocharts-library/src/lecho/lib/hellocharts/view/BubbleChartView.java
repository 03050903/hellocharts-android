package lecho.lib.hellocharts.view;

import java.util.ArrayList;
import java.util.List;

import lecho.lib.hellocharts.BubbleChartDataProvider;
import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.BubbleChartData;
import lecho.lib.hellocharts.model.BubbleValue;
import lecho.lib.hellocharts.model.ChartData;
import lecho.lib.hellocharts.model.SelectedValue;
import lecho.lib.hellocharts.renderer.BubbleChartRenderer;
import android.content.Context;
import android.support.v4.view.ViewCompat;
import android.util.AttributeSet;

public class BubbleChartView extends AbstractChartView implements BubbleChartDataProvider {
	private static final String TAG = "BubbleChartView";
	protected BubbleChartData data;
	protected BubbleChartOnValueTouchListener onValueTouchListener = new DummyOnValueTouchListener();

	protected BubbleChartRenderer bubbleChartRenderer;

	public BubbleChartView(Context context) {
		this(context, null, 0);
	}

	public BubbleChartView(Context context, AttributeSet attrs) {
		this(context, attrs, 0);
	}

	public BubbleChartView(Context context, AttributeSet attrs, int defStyle) {
		super(context, attrs, defStyle);
		bubbleChartRenderer = new BubbleChartRenderer(context, this, this);
		chartRenderer = bubbleChartRenderer;
		setBubbleChartData(generateDummyData());
	}

	@Override
	public void setBubbleChartData(BubbleChartData data) {
		if (null == data) {
			this.data = generateDummyData();
		} else {
			this.data = data;
		}
		chartRenderer.initMaxViewport();
		chartRenderer.initCurrentViewport();
		chartRenderer.initDataAttributes();
		axesRenderer.initAxesAttributes();

		ViewCompat.postInvalidateOnAnimation(BubbleChartView.this);
	}

	@Override
	public BubbleChartData getBubbleChartData() {
		return data;
	}

	@Override
	public ChartData getChartData() {
		return data;
	}

	@Override
	public void callChartTouchListener(SelectedValue selectedValue) {
		BubbleValue value = data.getValues().get(selectedValue.firstIndex);
		onValueTouchListener.onValueTouched(selectedValue.firstIndex, value);
	}

	public BubbleChartOnValueTouchListener getOnValueTouchListener() {
		return onValueTouchListener;
	}

	public void setOnValueTouchListener(BubbleChartOnValueTouchListener touchListener) {
		if (null == touchListener) {
			this.onValueTouchListener = new DummyOnValueTouchListener();
		} else {
			this.onValueTouchListener = touchListener;
		}
	}

	@Override
	public void animationDataUpdate(float scale) {
		for (BubbleValue bubbleValue : data.getValues()) {
			bubbleValue.update(scale);
		}
		chartRenderer.initMaxViewport();
		chartRenderer.initCurrentViewport();
		ViewCompat.postInvalidateOnAnimation(this);
	}

	@Override
	public void animationDataFinished(boolean isFinishedSuccess) {
		for (BubbleValue bubbleValue : data.getValues()) {
			bubbleValue.finish(isFinishedSuccess);
		}
		chartRenderer.initMaxViewport();
		chartRenderer.initCurrentViewport();
		ViewCompat.postInvalidateOnAnimation(this);
	}

	/**
	 * Removes empty spaces, top-bottom for portrait orientation and left-right for landscape. This method has to be
	 * called after view View#onSizeChanged() method is called and chart data is set. This method may be inaccurate.
	 * 
	 * @see BubbleChartRenderer#removeMargins()
	 */
	public void removeMargins() {
		bubbleChartRenderer.removeMargins();
	}

	protected BubbleChartData generateDummyData() {
		final int numValues = 4;
		BubbleChartData data = new BubbleChartData();
		List<BubbleValue> values = new ArrayList<BubbleValue>(numValues);
		values.add(new BubbleValue(1, 20, 15000));
		values.add(new BubbleValue(3, 22, 20000));
		values.add(new BubbleValue(5, 25, 5000));
		values.add(new BubbleValue(7, 30, 30000));
		values.add(new BubbleValue(11, 22, 10000));
		data.setValues(values);
		data.setAxisX(new Axis().setAutoGenerated(false));
		data.setAxisY(new Axis().setAutoGenerated(false));
		return data;
	}

	public interface BubbleChartOnValueTouchListener {
		public void onValueTouched(int selectedBubble, BubbleValue value);
	}

	private static class DummyOnValueTouchListener implements BubbleChartOnValueTouchListener {

		@Override
		public void onValueTouched(int selectedBubble, BubbleValue value) {
			// do nothing
		}
	}
}
